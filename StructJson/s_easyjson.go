// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package StructJson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e36b5f5DecodeTestJsonStructJson(in *jlexer.Lexer, out *AutoGenerated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			easyjson8e36b5f5Decode(in, &out.Device)
		case "site":
			easyjson8e36b5f5Decode1(in, &out.Site)
		case "gdpr":
			easyjson8e36b5f5Decode2(in, &out.Gdpr)
		case "schain":
			easyjson8e36b5f5Decode3(in, &out.Schain)
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]struct {
							Bidder string `json:"bidder"`
							Params struct {
								SiteID     string  `json:"siteId"`
								FloorPrice float64 `json:"floorPrice"`
							} `json:"params"`
							Crumbs struct {
								Pubcid string `json:"pubcid"`
							} `json:"crumbs"`
							MediaTypes struct {
								Banner struct {
									Sizes [][]int `json:"sizes"`
								} `json:"banner"`
							} `json:"mediaTypes"`
							AdUnitCode          string  `json:"adUnitCode"`
							TransactionID       string  `json:"transactionId"`
							Sizes               [][]int `json:"sizes"`
							BidID               string  `json:"bidId"`
							BidderRequestID     string  `json:"bidderRequestId"`
							AuctionID           string  `json:"auctionId"`
							Src                 string  `json:"src"`
							BidRequestsCount    int     `json:"bidRequestsCount"`
							BidderRequestsCount int     `json:"bidderRequestsCount"`
							BidderWinsCount     int     `json:"bidderWinsCount"`
							Schain              struct {
								Ver      string `json:"ver"`
								Complete int    `json:"complete"`
								Nodes    []struct {
									Asi string `json:"asi"`
									Sid string `json:"sid"`
									Hp  int    `json:"hp"`
								} `json:"nodes"`
							} `json:"schain"`
							TargetKey int `json:"targetKey"`
						}, 0, 0)
					} else {
						out.Bids = []struct {
							Bidder string `json:"bidder"`
							Params struct {
								SiteID     string  `json:"siteId"`
								FloorPrice float64 `json:"floorPrice"`
							} `json:"params"`
							Crumbs struct {
								Pubcid string `json:"pubcid"`
							} `json:"crumbs"`
							MediaTypes struct {
								Banner struct {
									Sizes [][]int `json:"sizes"`
								} `json:"banner"`
							} `json:"mediaTypes"`
							AdUnitCode          string  `json:"adUnitCode"`
							TransactionID       string  `json:"transactionId"`
							Sizes               [][]int `json:"sizes"`
							BidID               string  `json:"bidId"`
							BidderRequestID     string  `json:"bidderRequestId"`
							AuctionID           string  `json:"auctionId"`
							Src                 string  `json:"src"`
							BidRequestsCount    int     `json:"bidRequestsCount"`
							BidderRequestsCount int     `json:"bidderRequestsCount"`
							BidderWinsCount     int     `json:"bidderWinsCount"`
							Schain              struct {
								Ver      string `json:"ver"`
								Complete int    `json:"complete"`
								Nodes    []struct {
									Asi string `json:"asi"`
									Sid string `json:"sid"`
									Hp  int    `json:"hp"`
								} `json:"nodes"`
							} `json:"schain"`
							TargetKey int `json:"targetKey"`
						}{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Bidder string `json:"bidder"`
						Params struct {
							SiteID     string  `json:"siteId"`
							FloorPrice float64 `json:"floorPrice"`
						} `json:"params"`
						Crumbs struct {
							Pubcid string `json:"pubcid"`
						} `json:"crumbs"`
						MediaTypes struct {
							Banner struct {
								Sizes [][]int `json:"sizes"`
							} `json:"banner"`
						} `json:"mediaTypes"`
						AdUnitCode          string  `json:"adUnitCode"`
						TransactionID       string  `json:"transactionId"`
						Sizes               [][]int `json:"sizes"`
						BidID               string  `json:"bidId"`
						BidderRequestID     string  `json:"bidderRequestId"`
						AuctionID           string  `json:"auctionId"`
						Src                 string  `json:"src"`
						BidRequestsCount    int     `json:"bidRequestsCount"`
						BidderRequestsCount int     `json:"bidderRequestsCount"`
						BidderWinsCount     int     `json:"bidderWinsCount"`
						Schain              struct {
							Ver      string `json:"ver"`
							Complete int    `json:"complete"`
							Nodes    []struct {
								Asi string `json:"asi"`
								Sid string `json:"sid"`
								Hp  int    `json:"hp"`
							} `json:"nodes"`
						} `json:"schain"`
						TargetKey int `json:"targetKey"`
					}
					easyjson8e36b5f5Decode4(in, &v1)
					out.Bids = append(out.Bids, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5EncodeTestJsonStructJson(out *jwriter.Writer, in AutoGenerated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix[1:])
		easyjson8e36b5f5Encode(out, in.Device)
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode1(out, in.Site)
	}
	{
		const prefix string = ",\"gdpr\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode2(out, in.Gdpr)
	}
	{
		const prefix string = ",\"schain\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode3(out, in.Schain)
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Bids {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson8e36b5f5Encode4(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutoGenerated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e36b5f5EncodeTestJsonStructJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutoGenerated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e36b5f5EncodeTestJsonStructJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutoGenerated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e36b5f5DecodeTestJsonStructJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutoGenerated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e36b5f5DecodeTestJsonStructJson(l, v)
}
func easyjson8e36b5f5Decode4(in *jlexer.Lexer, out *struct {
	Bidder string `json:"bidder"`
	Params struct {
		SiteID     string  `json:"siteId"`
		FloorPrice float64 `json:"floorPrice"`
	} `json:"params"`
	Crumbs struct {
		Pubcid string `json:"pubcid"`
	} `json:"crumbs"`
	MediaTypes struct {
		Banner struct {
			Sizes [][]int `json:"sizes"`
		} `json:"banner"`
	} `json:"mediaTypes"`
	AdUnitCode          string  `json:"adUnitCode"`
	TransactionID       string  `json:"transactionId"`
	Sizes               [][]int `json:"sizes"`
	BidID               string  `json:"bidId"`
	BidderRequestID     string  `json:"bidderRequestId"`
	AuctionID           string  `json:"auctionId"`
	Src                 string  `json:"src"`
	BidRequestsCount    int     `json:"bidRequestsCount"`
	BidderRequestsCount int     `json:"bidderRequestsCount"`
	BidderWinsCount     int     `json:"bidderWinsCount"`
	Schain              struct {
		Ver      string `json:"ver"`
		Complete int    `json:"complete"`
		Nodes    []struct {
			Asi string `json:"asi"`
			Sid string `json:"sid"`
			Hp  int    `json:"hp"`
		} `json:"nodes"`
	} `json:"schain"`
	TargetKey int `json:"targetKey"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bidder":
			out.Bidder = string(in.String())
		case "params":
			easyjson8e36b5f5Decode5(in, &out.Params)
		case "crumbs":
			easyjson8e36b5f5Decode6(in, &out.Crumbs)
		case "mediaTypes":
			easyjson8e36b5f5Decode7(in, &out.MediaTypes)
		case "adUnitCode":
			out.AdUnitCode = string(in.String())
		case "transactionId":
			out.TransactionID = string(in.String())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([][]int, 0, 2)
					} else {
						out.Sizes = [][]int{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 []int
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]int, 0, 8)
							} else {
								v4 = []int{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 int
							v5 = int(in.Int())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Sizes = append(out.Sizes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidId":
			out.BidID = string(in.String())
		case "bidderRequestId":
			out.BidderRequestID = string(in.String())
		case "auctionId":
			out.AuctionID = string(in.String())
		case "src":
			out.Src = string(in.String())
		case "bidRequestsCount":
			out.BidRequestsCount = int(in.Int())
		case "bidderRequestsCount":
			out.BidderRequestsCount = int(in.Int())
		case "bidderWinsCount":
			out.BidderWinsCount = int(in.Int())
		case "schain":
			easyjson8e36b5f5Decode3(in, &out.Schain)
		case "targetKey":
			out.TargetKey = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode4(out *jwriter.Writer, in struct {
	Bidder string `json:"bidder"`
	Params struct {
		SiteID     string  `json:"siteId"`
		FloorPrice float64 `json:"floorPrice"`
	} `json:"params"`
	Crumbs struct {
		Pubcid string `json:"pubcid"`
	} `json:"crumbs"`
	MediaTypes struct {
		Banner struct {
			Sizes [][]int `json:"sizes"`
		} `json:"banner"`
	} `json:"mediaTypes"`
	AdUnitCode          string  `json:"adUnitCode"`
	TransactionID       string  `json:"transactionId"`
	Sizes               [][]int `json:"sizes"`
	BidID               string  `json:"bidId"`
	BidderRequestID     string  `json:"bidderRequestId"`
	AuctionID           string  `json:"auctionId"`
	Src                 string  `json:"src"`
	BidRequestsCount    int     `json:"bidRequestsCount"`
	BidderRequestsCount int     `json:"bidderRequestsCount"`
	BidderWinsCount     int     `json:"bidderWinsCount"`
	Schain              struct {
		Ver      string `json:"ver"`
		Complete int    `json:"complete"`
		Nodes    []struct {
			Asi string `json:"asi"`
			Sid string `json:"sid"`
			Hp  int    `json:"hp"`
		} `json:"nodes"`
	} `json:"schain"`
	TargetKey int `json:"targetKey"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bidder\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bidder))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode5(out, in.Params)
	}
	{
		const prefix string = ",\"crumbs\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode6(out, in.Crumbs)
	}
	{
		const prefix string = ",\"mediaTypes\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode7(out, in.MediaTypes)
	}
	{
		const prefix string = ",\"adUnitCode\":"
		out.RawString(prefix)
		out.String(string(in.AdUnitCode))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionID))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Sizes {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v8, v9 := range v7 {
						if v8 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v9))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bidId\":"
		out.RawString(prefix)
		out.String(string(in.BidID))
	}
	{
		const prefix string = ",\"bidderRequestId\":"
		out.RawString(prefix)
		out.String(string(in.BidderRequestID))
	}
	{
		const prefix string = ",\"auctionId\":"
		out.RawString(prefix)
		out.String(string(in.AuctionID))
	}
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix)
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"bidRequestsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidRequestsCount))
	}
	{
		const prefix string = ",\"bidderRequestsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidderRequestsCount))
	}
	{
		const prefix string = ",\"bidderWinsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidderWinsCount))
	}
	{
		const prefix string = ",\"schain\":"
		out.RawString(prefix)
		easyjson8e36b5f5Encode3(out, in.Schain)
	}
	{
		const prefix string = ",\"targetKey\":"
		out.RawString(prefix)
		out.Int(int(in.TargetKey))
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode7(in *jlexer.Lexer, out *struct {
	Banner struct {
		Sizes [][]int `json:"sizes"`
	} `json:"banner"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "banner":
			easyjson8e36b5f5Decode8(in, &out.Banner)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode7(out *jwriter.Writer, in struct {
	Banner struct {
		Sizes [][]int `json:"sizes"`
	} `json:"banner"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"banner\":"
		out.RawString(prefix[1:])
		easyjson8e36b5f5Encode8(out, in.Banner)
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode8(in *jlexer.Lexer, out *struct {
	Sizes [][]int `json:"sizes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([][]int, 0, 2)
					} else {
						out.Sizes = [][]int{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 []int
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						in.Delim('[')
						if v10 == nil {
							if !in.IsDelim(']') {
								v10 = make([]int, 0, 8)
							} else {
								v10 = []int{}
							}
						} else {
							v10 = (v10)[:0]
						}
						for !in.IsDelim(']') {
							var v11 int
							v11 = int(in.Int())
							v10 = append(v10, v11)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Sizes = append(out.Sizes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode8(out *jwriter.Writer, in struct {
	Sizes [][]int `json:"sizes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Sizes {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v14, v15 := range v13 {
						if v14 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v15))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode6(in *jlexer.Lexer, out *struct {
	Pubcid string `json:"pubcid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pubcid":
			out.Pubcid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode6(out *jwriter.Writer, in struct {
	Pubcid string `json:"pubcid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pubcid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Pubcid))
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode5(in *jlexer.Lexer, out *struct {
	SiteID     string  `json:"siteId"`
	FloorPrice float64 `json:"floorPrice"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "siteId":
			out.SiteID = string(in.String())
		case "floorPrice":
			out.FloorPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode5(out *jwriter.Writer, in struct {
	SiteID     string  `json:"siteId"`
	FloorPrice float64 `json:"floorPrice"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"siteId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SiteID))
	}
	{
		const prefix string = ",\"floorPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.FloorPrice))
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode3(in *jlexer.Lexer, out *struct {
	Ver      string `json:"ver"`
	Complete int    `json:"complete"`
	Nodes    []struct {
		Asi string `json:"asi"`
		Sid string `json:"sid"`
		Hp  int    `json:"hp"`
	} `json:"nodes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "complete":
			out.Complete = int(in.Int())
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]struct {
							Asi string `json:"asi"`
							Sid string `json:"sid"`
							Hp  int    `json:"hp"`
						}, 0, 1)
					} else {
						out.Nodes = []struct {
							Asi string `json:"asi"`
							Sid string `json:"sid"`
							Hp  int    `json:"hp"`
						}{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v16 struct {
						Asi string `json:"asi"`
						Sid string `json:"sid"`
						Hp  int    `json:"hp"`
					}
					easyjson8e36b5f5Decode9(in, &v16)
					out.Nodes = append(out.Nodes, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode3(out *jwriter.Writer, in struct {
	Ver      string `json:"ver"`
	Complete int    `json:"complete"`
	Nodes    []struct {
		Asi string `json:"asi"`
		Sid string `json:"sid"`
		Hp  int    `json:"hp"`
	} `json:"nodes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ver))
	}
	{
		const prefix string = ",\"complete\":"
		out.RawString(prefix)
		out.Int(int(in.Complete))
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Nodes {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson8e36b5f5Encode9(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode9(in *jlexer.Lexer, out *struct {
	Asi string `json:"asi"`
	Sid string `json:"sid"`
	Hp  int    `json:"hp"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asi":
			out.Asi = string(in.String())
		case "sid":
			out.Sid = string(in.String())
		case "hp":
			out.Hp = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode9(out *jwriter.Writer, in struct {
	Asi string `json:"asi"`
	Sid string `json:"sid"`
	Hp  int    `json:"hp"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asi\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asi))
	}
	{
		const prefix string = ",\"sid\":"
		out.RawString(prefix)
		out.String(string(in.Sid))
	}
	{
		const prefix string = ",\"hp\":"
		out.RawString(prefix)
		out.Int(int(in.Hp))
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode2(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode2(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson8e36b5f5Decode1(in *jlexer.Lexer, out *struct {
	ID       string `json:"id"`
	Page     string `json:"page"`
	Referrer string `json:"referrer"`
	Hostname string `json:"hostname"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "page":
			out.Page = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode1(out *jwriter.Writer, in struct {
	ID       string `json:"id"`
	Page     string `json:"page"`
	Referrer string `json:"referrer"`
	Hostname string `json:"hostname"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.String(string(in.Page))
	}
	{
		const prefix string = ",\"referrer\":"
		out.RawString(prefix)
		out.String(string(in.Referrer))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	out.RawByte('}')
}
func easyjson8e36b5f5Decode(in *jlexer.Lexer, out *struct {
	Ua       string `json:"ua"`
	Height   int    `json:"height"`
	Width    int    `json:"width"`
	Dnt      int    `json:"dnt"`
	Language string `json:"language"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.Ua = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "dnt":
			out.Dnt = int(in.Int())
		case "language":
			out.Language = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5Encode(out *jwriter.Writer, in struct {
	Ua       string `json:"ua"`
	Height   int    `json:"height"`
	Width    int    `json:"width"`
	Dnt      int    `json:"dnt"`
	Language string `json:"language"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ua))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"dnt\":"
		out.RawString(prefix)
		out.Int(int(in.Dnt))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	out.RawByte('}')
}
