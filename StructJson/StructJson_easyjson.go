// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package StructJson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson674bf449DecodeTestJsonStructJson(in *jlexer.Lexer, out *DataSite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "page":
			out.Page = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson(out *jwriter.Writer, in DataSite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.String(string(in.Page))
	}
	{
		const prefix string = ",\"referrer\":"
		out.RawString(prefix)
		out.String(string(in.Referrer))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataSite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataSite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataSite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataSite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson1(in *jlexer.Lexer, out *DataSchain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "complete":
			out.Complete = int(in.Int())
		case "nodes":
			(out.Nodes).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson1(out *jwriter.Writer, in DataSchain) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ver))
	}
	{
		const prefix string = ",\"complete\":"
		out.RawString(prefix)
		out.Int(int(in.Complete))
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		(in.Nodes).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataSchain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataSchain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataSchain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataSchain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson1(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson2(in *jlexer.Lexer, out *DataParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "site_id":
			out.SiteId = string(in.String())
		case "floor_price":
			out.FloorPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson2(out *jwriter.Writer, in DataParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"site_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.SiteId))
	}
	{
		const prefix string = ",\"floor_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.FloorPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson2(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson3(in *jlexer.Lexer, out *DataNodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asi":
			out.Asi = string(in.String())
		case "sid":
			out.Sid = string(in.String())
		case "hp":
			out.Hp = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson3(out *jwriter.Writer, in DataNodes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asi\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asi))
	}
	{
		const prefix string = ",\"sid\":"
		out.RawString(prefix)
		out.String(string(in.Sid))
	}
	{
		const prefix string = ",\"hp\":"
		out.RawString(prefix)
		out.Int(int(in.Hp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataNodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataNodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataNodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataNodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson3(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson4(in *jlexer.Lexer, out *DataMediaTypes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "banner":
			(out.Banner).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson4(out *jwriter.Writer, in DataMediaTypes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"banner\":"
		out.RawString(prefix[1:])
		(in.Banner).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataMediaTypes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataMediaTypes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataMediaTypes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataMediaTypes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson4(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson5(in *jlexer.Lexer, out *DataGdpr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson5(out *jwriter.Writer, in DataGdpr) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataGdpr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataGdpr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataGdpr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataGdpr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson5(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson6(in *jlexer.Lexer, out *DataDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.Ua = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "dnt":
			out.Dnt = int(in.Int())
		case "language":
			out.Language = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson6(out *jwriter.Writer, in DataDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ua))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"dnt\":"
		out.RawString(prefix)
		out.Int(int(in.Dnt))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataDevice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataDevice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataDevice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataDevice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson6(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson7(in *jlexer.Lexer, out *DataCrumbs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pubcid":
			out.Pubcid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson7(out *jwriter.Writer, in DataCrumbs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pubcid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Pubcid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataCrumbs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataCrumbs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataCrumbs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataCrumbs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson7(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson8(in *jlexer.Lexer, out *DataBid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bidder":
			out.Bidder = string(in.String())
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		case "crumbs":
			(out.Crumbs).UnmarshalEasyJSON(in)
		case "mediaTypes":
			(out.MediaTypes).UnmarshalEasyJSON(in)
		case "adUnitCode":
			out.AdUnitCode = string(in.String())
		case "transaction_id":
			out.TransactionId = string(in.String())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([][]int, 0, 2)
					} else {
						out.Sizes = [][]int{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []int
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]int, 0, 8)
							} else {
								v1 = []int{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 int
							v2 = int(in.Int())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Sizes = append(out.Sizes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidId":
			out.BidId = string(in.String())
		case "bidderRequestId":
			out.BidderRequestId = string(in.String())
		case "auctionId":
			out.AuctionId = string(in.String())
		case "src":
			out.Src = string(in.String())
		case "bidRequestsCount":
			out.BidRequestsCount = int(in.Int())
		case "bidderRequestsCount":
			out.BidderRequestsCount = int(in.Int())
		case "bidderWinsCount":
			out.BidderWinsCount = int(in.Int())
		case "schain":
			(out.Schain).UnmarshalEasyJSON(in)
		case "targetKey":
			out.TargetKey = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson8(out *jwriter.Writer, in DataBid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bidder\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bidder))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		(in.Params).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"crumbs\":"
		out.RawString(prefix)
		(in.Crumbs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mediaTypes\":"
		out.RawString(prefix)
		(in.MediaTypes).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"adUnitCode\":"
		out.RawString(prefix)
		out.String(string(in.AdUnitCode))
	}
	{
		const prefix string = ",\"transaction_id\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Sizes {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bidId\":"
		out.RawString(prefix)
		out.String(string(in.BidId))
	}
	{
		const prefix string = ",\"bidderRequestId\":"
		out.RawString(prefix)
		out.String(string(in.BidderRequestId))
	}
	{
		const prefix string = ",\"auctionId\":"
		out.RawString(prefix)
		out.String(string(in.AuctionId))
	}
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix)
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"bidRequestsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidRequestsCount))
	}
	{
		const prefix string = ",\"bidderRequestsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidderRequestsCount))
	}
	{
		const prefix string = ",\"bidderWinsCount\":"
		out.RawString(prefix)
		out.Int(int(in.BidderWinsCount))
	}
	{
		const prefix string = ",\"schain\":"
		out.RawString(prefix)
		(in.Schain).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"targetKey\":"
		out.RawString(prefix)
		out.Int(int(in.TargetKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson8(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson9(in *jlexer.Lexer, out *DataBanner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([][]int, 0, 2)
					} else {
						out.Sizes = [][]int{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 []int
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]int, 0, 8)
							} else {
								v7 = []int{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 int
							v8 = int(in.Int())
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Sizes = append(out.Sizes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson9(out *jwriter.Writer, in DataBanner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Sizes {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v11, v12 := range v10 {
						if v11 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v12))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBanner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBanner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBanner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBanner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson9(l, v)
}
func easyjson674bf449DecodeTestJsonStructJson10(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			(out.Device).UnmarshalEasyJSON(in)
		case "site":
			(out.Site).UnmarshalEasyJSON(in)
		case "gdpr":
			(out.Gdpr).UnmarshalEasyJSON(in)
		case "schain":
			(out.Schain).UnmarshalEasyJSON(in)
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]DataBid, 0, 0)
					} else {
						out.Bids = []DataBid{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v13 DataBid
					(v13).UnmarshalEasyJSON(in)
					out.Bids = append(out.Bids, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson674bf449EncodeTestJsonStructJson10(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix[1:])
		(in.Device).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		(in.Site).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gdpr\":"
		out.RawString(prefix)
		(in.Gdpr).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"schain\":"
		out.RawString(prefix)
		(in.Schain).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Bids {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson674bf449EncodeTestJsonStructJson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson674bf449EncodeTestJsonStructJson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson674bf449DecodeTestJsonStructJson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson674bf449DecodeTestJsonStructJson10(l, v)
}
