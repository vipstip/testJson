package main

import (
	"encoding/json"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"github.com/valyala/fastjson"
	"io/ioutil"
	"log"
	"os"
	"testJson/StructJson"
	"time"
)

type Awesome struct {
	Id        string  `json:"id"`
	Message   string  `json:"message"`
	Score     float64 `json:"score"`
	Confirmed bool    `json:"confirmed"`
}

func NewAwesome(id string, message string, score float64, confirmed bool) *Awesome {
	return &Awesome{
		id,
		message,
		score,
		confirmed,
	}
}

func NewAwesomeFromJSON(jsonData []byte) *Awesome {
	var awesome *Awesome
	err := json.Unmarshal(jsonData, &awesome)
	if err != nil {
		return nil
	}
	return awesome
}

func (a *Awesome) ToJSON(pretty bool) ([]byte, error) {
	if pretty {
		return json.MarshalIndent(a, "", "  ")
	} else {
		return json.Marshal(a)
	}
}

func main() {
	//awesome := NewAwesome("123456789", "Total awesomeness", 9.99, true)
	//awesomeJSON, _ := awesome.ToJSON(false)
	//fmt.Printf("%s\n", awesomeJSON)
	//moreAwesomeJSON, _ := awesome.ToJSON(true)
	//fmt.Printf("%s\n", moreAwesomeJSON)

	//EncodeJson()

	//EncodeFastJson()

	//EncodeEasyJson()

	EncodeJsonIter()
}

func EncodeJson() {
	defer duration(track("GetJson"))
	jsonFile, _ := os.Open("bid-request.json")
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var jsons StructJson.AutoGenerated

	json.Unmarshal(byteValue, &jsons)
	//fmt.Println(jsons.Device.Ua)
	//fmt.Println(jsons.Device.Height)
	//fmt.Println(jsons.Device.Width)
	//fmt.Println(jsons.Device.Dnt)
	//fmt.Println(jsons.Device.Language)
	//fmt.Println(jsons.Site.ID)
	//fmt.Println(jsons.Site.Page)
	//fmt.Println(jsons.Site.Referrer)
	//fmt.Println(jsons.Site.Hostname)
}

func EncodeFastJson() {
	defer duration(track("GetFastJson"))
	jsonFile, _ := os.Open("bid-request.json")
	byteValue, _ := ioutil.ReadAll(jsonFile)

	fmt.Println(fastjson.GetString(byteValue, "device", "ua"))
	fmt.Println(fastjson.GetInt(byteValue, "device", "height"))
	fmt.Println(fastjson.GetInt(byteValue, "device", "width"))
	fmt.Println(fastjson.GetInt(byteValue, "device", "dnt"))
	fmt.Println(fastjson.GetString(byteValue, "device", "language"))
	fmt.Println(fastjson.GetString(byteValue, "site", "id"))
	fmt.Println(fastjson.GetString(byteValue, "site", "page"))
	fmt.Println(fastjson.GetString(byteValue, "site", "referrer"))
	fmt.Println(fastjson.GetString(byteValue, "site", "hostname"))

}

func EncodeEasyJson() {
	defer duration(track("GetFastJson"))
	jsonFile, _ := os.Open("bid-request.json")
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var d StructJson.AutoGenerated
	d.UnmarshalJSON(byteValue)
	//fmt.Println(d)
}

func EncodeJsonIter() {
	defer duration(track("GetFastJson"))
	jsonFile, _ := os.Open("bid-request.json")
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var data StructJson.AutoGenerated

	var jsons = jsoniter.ConfigCompatibleWithStandardLibrary
	jsons.Unmarshal(byteValue, &data)
	//fmt.Println(data)

}

func track(msg string) (string, time.Time) {
	return msg, time.Now()
}

func duration(msg string, start time.Time) {
	log.Printf("%v: %v\n", msg, time.Since(start))
}
